fmod FIELD is
	protecting NAT .
	sort Field .
	ops id typ dst pt sw : -> Field [ctor] .
	ops SSH UDP TCP : -> Nat [ctor] .
	op undef : -> Nat [ctor] .
endfm

fmod PACKET is
	protecting NAT .
	protecting FIELD .	
	sort Packet .
	sort Value . 
	

	op (_,_) : Field Nat -> Value [ctor] .
	


	op #(id : _, typ : _, dst : _, pt : _, sw : _) : Nat Nat Nat Nat Nat -> Packet [ctor] .
	op _$_ : Packet Field -> Nat [ctor] .
	op _:=_ : Packet Value -> Packet [ctor] .	

	vars N1 N2 N3 N4 N5 V : Nat .
	var F : Field .
	var P P1 P2 : Packet .


	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ id = N1 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ typ = N2 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ dst = N3 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ pt = N4 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ sw = N5 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ F = undef [owise] .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (id, V) = #(id : V, typ : N2, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (typ, V) = #(id : N1, typ : V, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (dst, V) = #(id : N1, typ : N2, dst : V, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (pt, V) = #(id : N1, typ : N2, dst : N3, pt : V, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (sw, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : V) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (F, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) [owise] .
endfm

fmod PREDICATE is	
	protecting FIELD .
	protecting NAT .

	sort Predicate .

	op one : -> Predicate [ctor] .
	op zero : -> Predicate [ctor] .	

	op _=_ : Field Nat -> Predicate [ctor metadata "test" prec 39] .
	op ~_ : Predicate -> Predicate [ctor metadata "negation" prec 38] .
endfm

fmod POLICY is
	protecting FIELD .
	protecting NAT .
	protecting PREDICATE .

	sort Policy .
	subsort Predicate < Policy .

	op _+_ : Policy Policy -> Policy [ctor comm assoc metadata "nondeterministic choice" prec 43 gather (E e)] .
	op _._ : Policy Policy -> Policy [ctor assoc metadata "sequencing" prec 40] .
	op _;_ : Policy Policy -> Policy [ctor metadata "sequential composition" prec 40] .
	op _<-_ : Field Nat -> Policy [ctor metadata "modification" prec 39] .
	op _||_ : Policy Policy -> Policy [ctor comm assoc metadata "parallel composition" prec 42 gather (E e)] .
	op _|_ : Policy Policy -> Policy [ctor comm assoc prec 42 gather (E e)] .
	op _||<_ : Policy Policy -> Policy [ctor metadata "left merge" prec 42 gather (E e)] .
endfm

mod COMM is
	protecting POLICY .

	sort Channel .

	op _?_ : Channel Policy -> Policy .
	op _!_ : Channel Policy -> Policy .
endm

mod DNA is
	protecting FIELD .
	protecting PACKET .
	protecting COMM .
	protecting NAT .
	protecting PREDICATE .
	protecting POLICY .


	op _??_ : Channel Policy -> Policy .
	op rcfg(_) : Policy -> Policy .
	op isAtom(_) : Policy -> Bool .
	op isSingleStepAtom(_) : Policy -> Bool .

	---Predicate implementation
	vars A B : Predicate .
	var X : Channel .
	var P Q R : Policy .
	var F : Field .
	var N : Nat .

	
	eq isAtom(zero) = true .
	eq isAtom(one) = true .
	eq isAtom(F = N) = true .
	eq isAtom(X ? P) = true .
	eq isAtom(X ! P) = true .
	eq isAtom(F <- N) = true .
	eq isAtom(P + Q) = false .
	eq isAtom(P . Q) = false .
	
	
	eq isSingleStepAtom(zero) = true .
	eq isSingleStepAtom(one) = true .
	eq isSingleStepAtom(F = N) = true .
	eq isSingleStepAtom(X ? P) = false .
	eq isSingleStepAtom(X ! P) = true .
	eq isSingleStepAtom(F <- N) = true .
	eq isSingleStepAtom(P + Q) = false .
	eq isSingleStepAtom(P . Q) = false .

	

	---A1: added comm to _+_
	---A2: added assoc to _+_

	eq [A3] : P + P = P .
	eq [A4] : (P + Q) . R = P . R + Q . R .
	
	---A5: added assoc to _._

	eq [A6] : P + zero = P .
	eq [A7-r] : zero . P = zero .
	eq [A7-l] : P . zero = zero .
	eq [A8] : one . P = P .
	eq [A9] : P . one = P .


	---C1: added comm to _|_
	---C2: added assoc to _|_
	eq [C2] : P | Q | R = zero .
	eq [C3] : P | Q = zero [owise] .
	

	eq [CM1] : P || Q = P ||< Q + Q ||< P + P | Q .
	ceq [CM2] : P ||< Q = P . Q if isSingleStepAtom(P) .
	ceq [CM2-?] : ((X ? P) . Q) ||< R = (X ?? P) . (P . Q || R) if isSingleStepAtom(P) .
	ceq [CM3] : (P . Q) ||< R = P . (Q || R) if isSingleStepAtom(P) .
	eq [CM4] : (P + Q) ||< R = P ||< R + Q ||< R .
	eq [CM5] : ((X ? P) . R) | X ! P = rcfg(P) . P . R .
	eq [CM6] : (X ? P) | ((X ! P) . R) = rcfg(P) . (P || R) .
	eq [CM7] : ((X ? P) . R) | ((X ! P) . Q) = rcfg(P) . (P . R || Q) .
	eq [CM8] : (P + Q) | R = P | R + Q | R .
	eq [CM9] : P | (Q + R) = P | Q + P | R .
	eq [CM-one] : P || one = P .
	eq [CM-zero] : P || zero = P .

	eq [N0] : ~ zero = one .
	eq [N1] : ~ one = zero .
	eq [NN] : ~ (~ A) = A .
	eq [N+] : ~ (A + B) = ~ A . ~ B .
	eq [N.] : ~ (A . B) = ~ A + ~ B .
	---eq [NT] : 

endm

