fmod LABEL is
	sort Label .
	sort LabelEl .
endfm

fmod ENV is	
	protecting LABEL .

	sort Env .
	subsort Env < LabelEl .
	
	op pre-env : -> Env .
	op pol-env : -> Env .
endfm

fmod FIELD is
	protecting NAT .
	sort Field .
	ops id typ dst pt sw : -> Field [ctor] .
	ops SSH UDP TCP : -> Nat [ctor] .
	op undefined : -> Nat [ctor] .
endfm

fmod PACKET is
	protecting NAT .
	protecting FIELD .	
	protecting LABEL .	
	sort Packet .
	sort Value . 
	

	subsort Packet < LabelEl .


	op (_,_) : Field Nat -> Value [ctor] .
	
	op top(_) : Packet -> Packet [ctor] .
	op bottom(_) : Packet -> Packet [ctor] .	

	op #(id : _, typ : _, dst : _, pt : _, sw : _) : Nat Nat Nat Nat Nat -> Packet [ctor] .
	op _$_ : Packet Field -> Nat [ctor] .
	op _:=_ : Packet Value -> Packet [ctor] .	

	vars N1 N2 N3 N4 N5 V : Nat .
	var F : Field .
	var P P1 P2 : Packet .

	eq bottom(bottom(P)) = bottom(P) .
	eq top(top(P)) = top(P) .


	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ id = N1 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ typ = N2 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ dst = N3 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ pt = N4 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ sw = N5 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ F = undefined [owise] .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (id, V) = #(id : V, typ : N2, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (typ, V) = #(id : N1, typ : V, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (dst, V) = #(id : N1, typ : N2, dst : V, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (pt, V) = #(id : N1, typ : N2, dst : N3, pt : V, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (sw, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : V) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (F, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) [owise] .
endfm

fmod PREDICATE is	
	protecting FIELD .
	protecting NAT .

	sort Predicate .

	op one : -> Predicate [ctor] .
	op zero : -> Predicate [ctor] .	

	op _=_ : Field Nat -> Predicate [ctor metadata "test" prec 39] .
	op ~_ : Predicate -> Predicate [ctor metadata "negation" prec 38] .
endfm

fmod POLICY is
	protecting FIELD .
	protecting NAT .
	protecting PREDICATE .

	sort Policy .
	subsort Predicate < Policy .

	op _+_ : Policy Policy -> Policy [ctor metadata "nondeterministic choice" prec 43 gather (E e)] .
	op _._ : Policy Policy -> Policy [ctor metadata "sequencing" prec 40] .
	op _;_ : Policy Policy -> Policy [ctor metadata "sequential composition" prec 40] .
	op _<-_ : Field Nat -> Policy [ctor metadata "modification" prec 39] .
	op _||_ : Policy Policy -> Policy [ctor metadata "parallel composition" prec 42 gather (E e)] .
endfm

fmod COMM is
	protecting LABEL .
	protecting POLICY .

	sort Comm .
	sort Channel .

	subsort Comm < LabelEl .

	op _?Lab_ : Channel Policy -> Comm .
	op _?_ : Channel Policy -> Policy .
	op _!Lab_ : Channel Policy -> Comm .
	op _!_ : Channel Policy -> Policy .
endfm

fmod NEW is
	protecting LABEL .

	sort New .

	subsort New < LabelEl .

	op new(_) : LabelEl -> New .
endfm

fmod RCFG is
	protecting LABEL .
	protecting POLICY .

	sort Rcfg .

	subsort Rcfg < LabelEl .

	op rcfg(_) : Policy -> Rcfg .
endfm

---(
fmod GET-SET is
	protecting LABEL .

	
	op get(_,_) : LabelEl Label -> LabelEl .
	op set(_,_,_) : LabelEl Label LabelEl -> Label .

	var LE1 LE2 LEV1 LEV2 : LabelEl .
	var L1 L2 : Label .


	eq set(LE1, set(LE1, L1, LEV1), LEV2) = set(LE1, L1, LEV2) . ---last set 
endfm
)

fmod LABEL-DEF is
	protecting LABEL .
	protecting ENV .
	protecting PACKET .
	protecting COMM .
	protecting NEW .
	protecting RCFG .

	sort Template .

	op _x_x_x_x_ : Env Packet Comm New Rcfg -> Template .
	op [_] : Template -> Label .

	var E1 E2 : Env .
	var P1 P2 : Packet .
	var C1 C2 : Comm .
	var N1 N2 : New .	
	var R1 R2 : Rcfg .	

	op getEnv(_) : Label -> Env .
	op setEnv(_,_) : Label Env -> Label .
	eq getEnv([E1 x P1 x C1 x N1 x R1]) = E1 . 
	eq setEnv([E1 x P1 x C1 x N1 x R1], E2) = [E2 x P1 x C1 x N1 x R1] .

	op getPacket(_) : Label -> Packet .
	op setPacket(_,_) : Label Packet -> Label .
	eq getPacket([E1 x P1 x C1 x N1 x R1]) = P1 . 
	eq setPacket([E1 x P1 x C1 x N1 x R1], P2) = [E1 x P2 x C1 x N1 x R1] .

	op getComm(_) : Label -> Comm .
	op setComm(_,_) : Label Comm -> Label .
	eq getComm([E1 x P1 x C1 x N1 x R1]) = C1 . 
	eq setComm([E1 x P1 x C1 x N1 x R1], C2) = [E1 x P1 x C2 x N1 x R1] .

	op getNew(_) : Label -> LabelEl .
	op setNew(_,_) : Label LabelEl -> Label .
	eq getNew([E1 x P1 x C1 x N1 x R1]) = N1 . 
	eq setNew([E1 x P1 x C1 x N1 x R1], N2) = [E1 x P1 x C1 x N2 x R1] .

	op getRcfg(_) : Label -> Comm .
	op setRcfg(_,_) : Label Comm -> Label .
	eq getRcfg([E1 x P1 x C1 x N1 x R1]) = R1 . 
	eq setRcfg([E1 x P1 x C1 x N1 x R1], R2) = [E1 x P1 x C1 x N1 x R2] .
endfm

mod DNA is
	protecting ENV .
	protecting LABEL .
	protecting FIELD .
	protecting PACKET .
	protecting COMM .
	protecting NAT .
	protecting PREDICATE .
	protecting POLICY .
	protecting LABEL-DEF .	

	sort Configuration .

	op <_,_> : Predicate Label -> Configuration .
	op <_,_> : Policy Label -> Configuration .
	


	sort Terminate .
	subsort Terminate < Predicate .
	subsort Terminate < Policy .
	op pre-terminate : -> Terminate [ctor] .
	op pol-terminate : -> Terminate [ctor] .

		
	---Predicate implementation
	vars A B : Predicate .
	var F : Field .
	var N : Nat .
	var L L' : Label .
	var Sigma' : Packet .
	var Alpha : LabelEl .
	var C : Comm .
	var R : Rcfg .
	var P P' P'' Q Q' Q'' : Policy .
	var X : Channel .


	---fig 5 line 1
	rl [zero] : < zero, L > => < pre-terminate, setPacket(L, bottom(getPacket(L))) > .
	rl [one] : < one, L > => < pre-terminate, setPacket(L, top(getPacket(L))) > .


	---fig 5 line 2
	crl [test-top] : < F = N , L > => < pre-terminate, setPacket(L, top(getPacket(L))) > if (getPacket(L) $ F) == N .
	crl [test-bottom] : < F = N , L > => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (getPacket(L) $ F) =/= N .


	---fig 5 line 3
	crl [neg-top] : (< ~ A, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) . 
	crl [neg-bottom] : (< ~ A, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) .


	---fig 5 line 4
	crl [pre-plus-left-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) . 
	crl [pre-plus-right-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< B, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) . 
	
	
	---fig 5 line 5
	crl [pre-plus-bottom] : (< A + B, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) /\ (< B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) . 


	---fig 5 line 6
	crl [pre-dot-top] : (< A . B, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) /\ (< B, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) .
 	
	 
	---fig 5 line 7 
	crl [pre-dot-left-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< A, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) .
	crl [pre-dot-right-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) .




	---fig 6 line 1
	---this causes non-termination
	---not exactly sure what is the use of this
	---crl [pre-pol-top] : (< A, L >) => (< pol-terminate, setPacket(setEnv(L, pol-env), top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) .
	---crl [pre-pol-bottom] : (< A, L >) => (< pol-terminate, setPacket(setEnv(L, pol-env), bottom(getPacket(L))) >) if getPacket(L) == bottom(getPacket(L)) .
	

	---fig 6 line 2
 	crl [assgn-top] : (< F <- N, L >) => < pol-terminate, setPacket(L, (getPacket(L) := (F, N))) > if getPacket(L) =/= bottom(getPacket(L)) . 
	crl [assgn-bottom] : (< F <- N, L >) => < pol-terminate, L > if getPacket(L) == bottom(getPacket(L)) .


	---fig 6 line 3
	crl [pol-dot-packet] : (< P . Q, L >) => (< P' . Q, setPacket(L, Sigma') >) if (< P, L >) => (< P', setPacket(L, Sigma') >) .
	crl [pol-dot-new] : (< P . Q, L >) => (< P' . Q, setNew(L, Alpha) >) if (< P, L >) => (< P', setNew(L, Alpha) >) .
	crl [pol-dot-comm] : (< P . Q, L >) => (< P' . Q, setComm(L, C) >) if (< P, L >) => (< P', setComm(L, C) >) .
	crl [pol-dot-rcfg] : (< P . Q, L >) => (< P' . Q, setRcfg(L, R) >) if (< P, L >) => (< P', setRcfg(L, R) >) .
	
	crl [pol-dot-packet-top] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, setPacket(L', top(getPacket(L'))) >) .
	crl [pol-dot-packet-bottom] : (< P . Q, L >) => (< Q, setPacket(L', bottom(getPacket(L'))) >) if (< P, L >) => (< pol-terminate, setPacket(L', bottom(getPacket(L'))) >) .
	--- [pol-dot-packet-terminate] is needed since due to [pol-dot-packet] we might encounter < pol-terminate . Q, L > where getPacket(L) is top
	--- in that case, according to fig 6 row 3, column 2, we could get < Q, L >. Therefore, we explicitly need to encode [pol-dot-packet-terminate].
	crl [pol-dot-packet-terminate] : (< pol-terminate . Q, L >) => (< Q, L >) if getPacket(L) == top(getPacket(L)) .


	---fig 6 line 4
	crl [pol-dot-receive-terminate] : (< P . Q, L >) => (< Q, setComm(L, X ?Lab P') >) if (< P, L >) => (< pol-terminate, setComm(L, X ?Lab P') >) .
	crl [pol-dot-send-terminate] : (< P . Q, L >) => (< Q, setComm(L, X !Lab P') >) if (< P, L >) => (< pol-terminate, setComm(L, X !Lab P') >) .
	crl [pol-dot-rcfg-terminate] : (< P . Q, L >) => (< Q, setRcfg(L, rcfg(P')) >) if (< P, L >) => (< pol-terminate, setRcfg(L, rcfg(P')) >) .


	---fig 6 line 5
	crl [pol-plus-packet-left] : (< P + Q, L >) => (< P', setPacket(L, Sigma') >) if (< P, L >) => (< P', setPacket(L, Sigma') >) .
	crl [pol-plus-new-left] : (< P + Q, L >) => (< P', setNew(L, Alpha) >) if (< P, L >) => (< P', setNew(L, Alpha) >) .
	crl [pol-plus-comm-left] : (< P + Q, L >) => (< P', setComm(L, C) >) if (< P, L >) => (< P', setComm(L, C) >) .
	crl [pol-plus-rcfg-left] : (< P + Q, L >) => (< P', setRcfg(L, R) >) if (< P, L >) => (< P', setRcfg(L, R) >) .

	crl [pol-plus-packet-right] : (< P + Q, L >) => (< Q', setPacket(L, Sigma') >) if (< Q, L >) => (< Q', setPacket(L, Sigma') >) .
	crl [pol-plus-new-right] : (< P + Q, L >) => (< Q', setNew(L, Alpha) >) if (< Q, L >) => (< Q', setNew(L, Alpha) >) .
	crl [pol-plus-comm-right] : (< P + Q, L >) => (< Q', setComm(L, C) >) if (< Q, L >) => (< Q', setComm(L, C) >) .
	crl [pol-plus-rcfg-right] : (< P + Q, L >) => (< Q', setRcfg(L, R) >) if (< Q, L >) => (< Q', setRcfg(L, R) >) .

	crl [pol-plus-packet-left-terminate] : (< P + Q, L >) => (< pol-terminate, setPacket(L, Sigma') >) if (< P, L >) => (< pol-terminate, setPacket(L, Sigma') >) .
	crl [pol-plus-new-left-terminate] : (< P + Q, L >) => (< pol-terminate, setNew(L, Alpha) >) if (< P, L >) => (< pol-terminate, setNew(L, Alpha) >) .
	crl [pol-plus-comm-left-terminate] : (< P + Q, L >) => (< pol-terminate, setComm(L, C) >) if (< P, L >) => (< pol-terminate, setComm(L, C) >) .
	crl [pol-plus-rcfg-left-terminate] : (< P + Q, L >) => (< pol-terminate, setRcfg(L, R) >) if (< P, L >) => (< pol-terminate, setRcfg(L, R) >) .


	---fig 6 line 6
	crl [pol-plus-packet-right-terminate] : (< P + Q, L >) => (< pol-terminate, setPacket(L, Sigma') >) if (< Q, L >) => (< pol-terminate, setPacket(L, Sigma') >) .
	crl [pol-plus-new-right-terminate] : (< P + Q, L >) => (< pol-terminate, setNew(L, Alpha) >) if (< Q, L >) => (< pol-terminate, setNew(L, Alpha) >) .
	crl [pol-plus-comm-right-terminate] : (< P + Q, L >) => (< pol-terminate, setComm(L, C) >) if (< Q, L >) => (< pol-terminate, setComm(L, C) >) .
	crl [pol-plus-rcfg-right-terminate] : (< P + Q, L >) => (< pol-terminate, setRcfg(L, R) >) if (< Q, L >) => (< pol-terminate, setRcfg(L, R) >) .

	---how to define recursive?
	sort Recursive .
	subsort Recursive < Policy .

	op _.=_ : Recursive Policy -> Recursive .
	var RN : Recursive .


	crl [rec-packet] : (< RN .= P, L >) => (< P', setPacket(L, Sigma') >) if (< P, L >) => (< P', setPacket(L, Sigma') >) .
	crl [rec-new] : (< RN .= P, L >) => (< P', setNew(L, Alpha) >) if (< P, L >) => (< P', setNew(L, Alpha) >) .
	crl [rec-comm] : (< RN .= P, L >) => (< P', setComm(L, C) >) if (< P, L >) => (< P', setComm(L, C) >) .
	crl [rec-rcfg] : (< RN .= P, L >) => (< P', setRcfg(L, R) >) if (< P, L >) => (< P', setRcfg(L, R) >) .

	crl [rec-packet-terminate] : (< RN .= P, L >) => (< pol-terminate, setPacket(L, Sigma') >) if (< P, L >) => (< pol-terminate, setPacket(L, Sigma') >) .
	crl [rec-new-terminate] : (< RN .= P, L >) => (< pol-terminate, setNew(L, Alpha) >) if (< P, L >) => (< pol-terminate, setNew(L, Alpha) >) .
	crl [rec-comm-terminate] : (< RN .= P, L >) => (< pol-terminate, setComm(L, C) >) if (< P, L >) => (< pol-terminate, setComm(L, C) >) .
	crl [rec-rcfg-terminate] : (< RN .= P, L >) => (< pol-terminate, setRcfg(L, R) >) if (< P, L >) => (< pol-terminate, setRcfg(L, R) >) .




	---fig 7 line 1
	crl [pol-seq-packet] : (< P ; Q, L >) => (< P' ; Q, setPacket(L, Sigma') >) if (< P, L >) => (< P', setPacket(L, Sigma') >) .
	crl [pol-seq-new] : (< P ; Q, L >) => (< P' ; Q, setNew(L, Alpha) >) if (< P, L >) => (< P', setNew(L, Alpha) >) .
	crl [pol-seq-comm] : (< P ; Q, L >) => (< P' ; Q, setComm(L, C) >) if (< P, L >) => (< P', setComm(L, C) >) .
	crl [pol-seq-rcfg] : (< P ; Q, L >) => (< P' ; Q, setRcfg(L, R) >) if (< P, L >) => (< P', setRcfg(L, R) >) .
	---how to define col 2?


	---fig 7 line 2
	rl [in] : (< X ? P, L >) => (< P, setComm(L, X ?Lab P) >) .
	rl [out] : (< X ! P, L >) => (< pol-terminate, setComm(L, X !Lab P) >) .


	---fig7 line 3
	crl [pol-synch-packet-left] : (< P || Q, L >) => (< P' || Q, setPacket(L, Sigma') >) if (< P, L >) => (< P', setPacket(L, Sigma') >) .
	crl [pol-synch-new-left] : (< P || Q, L >) => (< P' || Q, setNew(L, Alpha) >) if (< P, L >) => (< P', setNew(L, Alpha) >) .
	crl [pol-synch-comm-left] : (< P || Q, L >) => (< P' || Q, setComm(L, C) >) if (< P, L >) => (< P', setComm(L, C) >) .
	crl [pol-synch-rcfg-left] : (< P || Q, L >) => (< P' || Q, setRcfg(L, R) >) if (< P, L >) => (< P', setRcfg(L, R) >) .

	crl [pol-synch-packet-right] : (< P || Q, L >) => (< P || Q', setPacket(L, Sigma') >) if (< Q, L >) => (< Q', setPacket(L, Sigma') >) .
	crl [pol-synch-new-right] : (< P || Q, L >) => (< P || Q', setNew(L, Alpha) >) if (< Q, L >) => (< Q', setNew(L, Alpha) >) .
	crl [pol-synch-comm-right] : (< P || Q, L >) => (< P || Q', setComm(L, C) >) if (< Q, L >) => (< Q', setComm(L, C) >) .
	crl [pol-synch-rcfg-right] : (< P || Q, L >) => (< P || Q', setRcfg(L, R) >) if (< Q, L >) => (< Q', setRcfg(L, R) >) .


	---fig 7 line 4
	crl [pol-synch-packet-left-terminate-top] : (< P || Q, L >) => (< Q, setPacket(L, Sigma') >) if (< P, L >) => (< pol-terminate, setPacket(L, top(Sigma')) >) .
	crl [pol-synch-packet-left-terminate-bottom] : (< P || Q, L >) => (< Q, setPacket(L, bottom(Sigma')) >) if (< P, L >) => (< pol-terminate, setPacket(L, bottom(Sigma')) >) .
	crl [pol-synch-packet-left-send] : (< P || Q, L >) => (< Q, setComm(L, X !Lab P'') >) if (< P, L >) => (< pol-terminate, setComm(L, X !Lab P'') >) .


	---fig 7 line 5
	crl [pol-synch-packet-right-terminate-top] : (< P || Q, L >) => (< P, setPacket(L, Sigma') >) if (< Q, L >) => (< pol-terminate, setPacket(L, top(Sigma')) >) .
	crl [pol-synch-packet-right-terminate-bottom] : (< P || Q, L >) => (< P, setPacket(L, bottom(Sigma')) >) if (< Q, L >) => (< pol-terminate, setPacket(L, bottom(Sigma')) >) .
	crl [pol-synch-packet-right-send] : (< P || Q, L >) => (< P, setComm(L, X !Lab P'') >) if (< Q, L >) => (< pol-terminate, setComm(L, X !Lab P'') >) .


	---fig 7 line 6
	crl [rcfg-send-receive] : (< P || Q, L >) => (< P' || Q', setRcfg(L, rcfg(P'')) >) if (< P, L >) => (< P', setComm(L, X !Lab P'') >) /\ (< Q, L >) => (< Q', setComm(L, X ?Lab P'') >) .
	crl [rcfg-send-terminate-receive] : (< P || Q, L >) => (< Q', setRcfg(L, rcfg(P'')) >) if (< P, L >) => (< pol-terminate, setComm(L, X !Lab P'') >) /\ (< Q, L >) => (< Q', setComm(L, X ?Lab P'') >) .


	---fig 7 line 7
	crl [rcfg-receive-send] : (< P || Q, L >) => (< P' || Q', setRcfg(L, rcfg(P'')) >) if (< P, L >) => (< P', setComm(L, X ?Lab P'') >) /\ (< Q, L >) => (< Q', setComm(L, X !Lab P'') >) .
	crl [rcfg-receive-send-terminate] : (< P || Q, L >) => (< P', setRcfg(L, rcfg(P'')) >) if (< P, L >) => (< P', setComm(L, X ?Lab P'') >) /\ (< Q, L >) => (< pol-terminate, setComm(L, X !Lab P'') >) .



endm

mod STATEFUL-FIREWALL is
	protecting DNA .

	ops Host Switch Switch' : -> Recursive .

	var secConReq secConEnd : Channel .
	var P0 : Policy .

	---Host .= ((secConReq !Pol P0) ; Host + (secConEnd !Pol P0) ; Host) 
	---Switch .= ((pt = 1) . (pt <- 2)) ; Switch + ((pt = 2) . zero) ; Switch + secConReq ?Pol PO ; Switch'
	---Switch' .= ((pt = 1) . (pt <- 2)) ; Switch' + ((pt = 2) . (pt <- 1)) ; Switch' + secConEnd ?Pol PO ; Switch
	---Init = Host || Switch

	---rew (Host .= ((secConReq !Pol P0) ; Host + (secConEnd !Pol P0) ; Host)) || (Switch .= ((pt = 1) . (pt <- 2)) ; Switch + ((pt = 2) . zero) ; Switch + secConReq ?Pol P0 ; ( Switch' .= ((pt = 1) . (pt <- 2)) ; Switch' + ((pt = 2) . (pt <- 1)) ; Switch' + secConEnd ?Pol P0 ; Switch)) .

endm


mod DISTRIBUTED-CONTROLLER is
	protecting DNA .

	ops L C1 C2 : -> Recursive .

	var upS1 upS2 upS3 upS4 upS5 upS6 : Channel .

	op Switch(_,_,_) : Nat Channel Policy -> Policy .
	

	var N : Nat .
	var P : Policy .
	var C : Channel .
	var Lbl Lbl' : Label .
	---eq Switch(N, C, P) = P ; Switch(N, C, P) + ((C ? (pt = 2) . (pt <- 4)) ; Switch(N, C, (pt = 2) . (pt <- 4)) + (C ? (pt = 12) . (pt <- 14)) ; Switch(N, C, (pt = 12) . (pt <- 14)) + (C ? zero) ; Switch(N, C, zero) + (C ? (pt = 6) . (pt <- 7)) ; Switch(N, C, (pt = 6) . (pt <- 7)) + (C ? (pt = 8) . (pt <- 10)) ; Switch(N, C, (pt = 8) . (pt <- 10))) .


	rl Switch(N, C, P) => P ; Switch(N, C, P) + (C ? (pt = 2) . (pt <- 4)) ; Switch(N, C, (pt = 2) . (pt <- 4)) .
	rl Switch(N, C, P) => P ; Switch(N, C, P) + (C ? (pt = 12) . (pt <- 14)) ; Switch(N, C, (pt = 12) . (pt <- 14)) .
	rl Switch(N, C, P) => P ; Switch(N, C, P) + (C ? zero) ; Switch(N, C, zero) .
	rl Switch(N, C, P) => P ; Switch(N, C, P) + (C ? (pt = 6) . (pt <- 7)) ; Switch(N, C, (pt = 6) . (pt <- 7)) .
	rl Switch(N, C, P) => P ; Switch(N, C, P) + (C ? (pt = 8) . (pt <- 10)) ; Switch(N, C, (pt = 8) . (pt <- 10)) .

	
	---D .= (Switch(1, upS1, pt = 2 . pt <- 4) || Switch(2, upS2, pt = 12 . pt <- 14) || Switch(3, upS3, zero) || Switch(4, upS4, zero) || Switch(5, upS5, pt = 6 . pt <- 7) || Switch(6, upS6, pt = 8 . pt <- 10)) . 


	---(L .= (((pt = 3) . (pt <- 5)) + ((pt = 4) . (pt <- 6)) + ((pt = 7) . (pt <- 8))+ ((pt = 9) . (pt <- 11)) + ((pt = 10) . (pt <- 12))) ; L)

	---C1 .= ((upS1 ! zero) || (upS3 ! (pt = 1 . pt <- 3)) || (upS5 ! (pt = 5 . pt <- 7)))
	---C2 .= ((upS2 ! zero) || (upS4 ! (pt = 11 . pt <- 13)) || (upS6 ! (pt = 8 . pt <- 9)))

	---SDN .= D || C1 || C2 || L
	
	---in_label .= [E x #(id : N1, typ : N2, dst : N3, pt : 1, sw : N5) x Co x Ne x R]
	---out_label .= [E' x #(id : N1', typ : N2', dst : N3', pt : 14, sw : N5') x Co x Ne x R]

	---search [5] < ((Switch(1, upS1, pt = 2 . pt <- 4) || Switch(2, upS2, pt = 12 . pt <- 14) || Switch(3, upS3, zero) || Switch(4, upS4, zero) || Switch(5, upS5, pt = 6 . pt <- 7) || Switch(6, upS6, pt = 8 . pt <- 10)) || ((upS1 ! zero) || (upS3 ! (pt = 1 . pt <- 3)) || (upS5 ! (pt = 5 . pt <- 7))) || ((upS2 ! zero) || (upS4 ! (pt = 11 . pt <- 13)) || (upS6 ! (pt = 8 . pt <- 9))) || (L .= (((pt = 3) . (pt <- 5)) + ((pt = 4) . (pt <- 6)) + ((pt = 7) . (pt <- 8)) + ((pt = 9) . (pt <- 11)) + ((pt = 10) . (pt <- 12))) ; L)), [E x #(id : N1, typ : N2, dst : N3, pt : 1, sw : N5) x Co x Ne x R] > =>* < P, [E' x #(id : N1', typ : N2', dst : N3', pt : 14, sw : N5') x Co x Ne x R] > .

	var E E' : Env .
	var Co Co' : Comm .
	var Ne Ne' : New .
	var R R' : Rcfg .


	vars N1 N2 N3 N4 N5 N1' N2' N3' N4' N5' : Nat .
	var F : Field .
	var PA : Packet .
endm
