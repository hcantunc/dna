load model-checker

fmod LABEL is
	sort Label .
	sort LabelEl .
endfm

fmod ENV is	
	protecting LABEL .

	sort Env .
	subsort Env < LabelEl .
	
	op pre-env : -> Env .
	op pol-env : -> Env .
endfm

fmod FIELD is
	protecting NAT .
	sort Field .
	ops id typ dst pt sw : -> Field [ctor] .
	ops SSH UDP TCP : -> Nat [ctor] .
	op undef : -> Nat [ctor] .
endfm

fmod PACKET is
	protecting NAT .
	protecting FIELD .	
	protecting LABEL .	
	sort Packet .
	sort Value . 
	

	subsort Packet < LabelEl .


	op (_,_) : Field Nat -> Value [ctor] .
	
	op top(_) : Packet -> Packet [ctor] .
	op bottom(_) : Packet -> Packet [ctor] .	
	op removeTag(_) : Packet -> Packet .

	op #(id : _, typ : _, dst : _, pt : _, sw : _) : Nat Nat Nat Nat Nat -> Packet [ctor] .
	op _$_ : Packet Field -> Nat [ctor] .
	op _:=_ : Packet Value -> Packet [ctor] .	

	vars N1 N2 N3 N4 N5 V : Nat .
	var F : Field .
	var P P1 P2 : Packet .
	var Val : Value .

	eq bottom(bottom(P)) = bottom(P) .
	eq top(top(P)) = top(P) .
	eq removeTag(top(P)) = P .
	eq removeTag(bottom(P)) = P .
	eq removeTag(P) = P [owise] .

	eq top(P) $ F = P $ F .
	eq bottom(P) $ F = P $ F .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ id = N1 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ typ = N2 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ dst = N3 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ pt = N4 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ sw = N5 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ F = undef [owise] .


	---eq (top(P) := Val) = P := Val .
	---eq (bottom(P) := Val) = P := Val .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (id, V) = #(id : V, typ : N2, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (typ, V) = #(id : N1, typ : V, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (dst, V) = #(id : N1, typ : N2, dst : V, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (pt, V) = #(id : N1, typ : N2, dst : N3, pt : V, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (sw, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : V) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (F, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) [owise] .
endfm

fmod PREDICATE is	
	protecting FIELD .
	protecting NAT .

	sort Predicate .

	op one : -> Predicate [ctor] .
	op zero : -> Predicate [ctor] .	

	op _=_ : Field Nat -> Predicate [ctor metadata "test" prec 39] .
	op ~_ : Predicate -> Predicate [ctor metadata "negation" prec 38] .
endfm

fmod POLICY is
	protecting FIELD .
	protecting NAT .
	protecting PREDICATE .

	sort Policy .
	subsort Predicate < Policy .

	op _+_ : Policy Policy -> Policy [ctor metadata "nondeterministic choice" prec 43 gather (E e)] .
	op _._ : Policy Policy -> Policy [ctor metadata "sequencing" prec 40] .
	op _;_ : Policy Policy -> Policy [ctor metadata "sequential composition" prec 40] .
	op _<-_ : Field Nat -> Policy [ctor metadata "modification" prec 39] .
	op _||_ : Policy Policy -> Policy [ctor metadata "parallel composition" prec 42 gather (E e)] .
endfm

view Policy from TRIV to POLICY is
	sort Elt to Policy .
endv

mod COMM is
	protecting LABEL .
	protecting POLICY .

	sort Channel .

	op _?_ : Channel Policy -> Policy .
	op _!_ : Channel Policy -> Policy .
endm

mod COMM-DEF is
	protecting LABEL .
	protecting POLICY .
	protecting COMM .
	protecting LIST {Policy} * (sort List {Policy} to Comm) .
	
	subsort Comm < LabelEl .

	var P : Policy .
	var X : Channel .
	var C : Comm .
	var I : Nat .


	op consume(_,_,_) : Channel Policy Comm -> Comm .
	op send(_,_,_) : Channel Policy Comm -> Comm .


	eq send(X, P, C) = append(X ! P, C) .
	eq consume(X, P, C) = append(X ? P, C) .
endm

fmod NEW is
	protecting LABEL .

	sort New .

	subsort New < LabelEl .

	op new(_) : LabelEl -> New .
endfm

fmod RCFG is
	protecting LABEL .
	protecting POLICY .

	sort Rcfg .

	subsort Rcfg < LabelEl .

	op rcfg(_) : Policy -> Rcfg .
endfm

mod LABEL-DEF is
	protecting LABEL .
	protecting ENV .
	protecting PACKET .
	protecting COMM .
	protecting COMM-DEF .
	protecting NEW .
	protecting RCFG .

	sort Template .
	---protecting MAP {Nat, Channel} * (op empty to emptyCoMap) .

	op _x_x_x_x_ : Env Packet Comm New Rcfg -> Template .
	op [_] : Template -> Label .

	var E1 E2 : Env .
	var P1 P2 : Packet .
	var C1 C2 : Comm .
	var N1 N2 : New .	
	var R1 R2 : Rcfg .	
	var L1 L2 : Label .
	var P : Policy .
	var X : Channel .

	op getEnv(_) : Label -> Env .
	op setEnv(_,_) : Label Env -> Label .
	eq getEnv([E1 x P1 x C1 x N1 x R1]) = E1 . 
	eq setEnv([E1 x P1 x C1 x N1 x R1], E2) = [E2 x P1 x C1 x N1 x R1] .

	op getPacket(_) : Label -> Packet .
	op setPacket(_,_) : Label Packet -> Label .
	eq getPacket([E1 x P1 x C1 x N1 x R1]) = P1 . 
	eq setPacket([E1 x P1 x C1 x N1 x R1], P2) = [E1 x P2 x C1 x N1 x R1] .

	op getComm(_) : Label -> Comm .
	op setComm(_,_) : Label Comm -> Label .
	eq getComm([E1 x P1 x C1 x N1 x R1]) = C1 . 
	eq setComm([E1 x P1 x C1 x N1 x R1], C2) = [E1 x P1 x C2 x N1 x R1] .

	op getNew(_) : Label -> LabelEl .
	op setNew(_,_) : Label LabelEl -> Label .
	eq getNew([E1 x P1 x C1 x N1 x R1]) = N1 . 
	eq setNew([E1 x P1 x C1 x N1 x R1], N2) = [E1 x P1 x C1 x N2 x R1] .

	op getRcfg(_) : Label -> Comm .
	op setRcfg(_,_) : Label Comm -> Label .
	eq getRcfg([E1 x P1 x C1 x N1 x R1]) = R1 . 
	eq setRcfg([E1 x P1 x C1 x N1 x R1], R2) = [E1 x P1 x C1 x N1 x R2] .



	---TODO:This operators are not parametric. 
	---		Whenever we have a new elemnent in the cartesian product, it should be updated.
	---		Could it be turned into a parametric one?
	op eqExcPacket(_,_) : Label Label -> Bool .
	op eqExcComm(_,_) : Label Label -> Bool .

	---Here we check whether all other elements exept for packets are equal in two labels.
	ceq eqExcPacket(L1, L2) = true if getEnv(L1) == getEnv(L2) /\ getComm(L1) == getComm(L2) /\ getNew(L1) == getNew(L2) /\ getRcfg(L1) == getRcfg(L2) .
	eq eqExcPacket(L1, L2) = false [owise] .

	---Here we check whether L2 is equal to modifying L1 with (L1.Comm += last Comm element in L2)
	ceq eqExcComm(L1, L2) = true if append(head(getComm(L2)), getComm(L1)) == getComm(L2) /\ getEnv(L1) == getEnv(L2) /\ getPacket(L1) == getPacket(L2) /\ getNew(L1) == getNew(L2) /\ getRcfg(L1) == getRcfg(L2) .
	eq eqExcComm(L1, L2) = false [owise] .
endm

fmod TERMINATE is 
	protecting PREDICATE .
	protecting POLICY .
	sort Terminate .
	subsort Terminate < Predicate .
	op pre-terminate : -> Terminate [ctor] .
	op pol-terminate : -> Terminate [ctor] .
endfm

mod DNA is
	protecting ENV .
	protecting LABEL .
	protecting FIELD .
	protecting PACKET .
	protecting COMM .
	protecting COMM-DEF .
	protecting NAT .
	protecting PREDICATE .
	protecting POLICY .
	protecting LABEL-DEF .	
	protecting TERMINATE .

	sort Configuration .

	sort ConditionalRule .
	op condition : -> ConditionalRule .

	op <_,_,_> : Predicate Label ConditionalRule -> Configuration .
	op <_,_,_> : Policy Label ConditionalRule -> Configuration .
	
	op <_,_> : Predicate Label -> Configuration .
	op <_,_> : Policy Label -> Configuration .

	sort Recursive .
	subsort Recursive < Policy .

	op _.=_ : Recursive Policy -> Recursive .
		
	---Predicate implementation
	vars A B : Predicate .
	var F : Field .
	var N : Nat .
	var L L' L'' : Label .
	var Sigma' : Packet .
	var Alpha : LabelEl .
	var C C' : Comm .
	var P P' P'' Q Q' Q'' LP MP RP : Policy .
	var X X' : Channel .
	var RN RN' : Recursive .
	var CR : ConditionalRule .




	---fig 5 line 1
	rl [zero] : < zero, L > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > .
	rl [zero-cond] : < zero, L, condition > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > .

	rl [one] : < one, L > => < pre-terminate, (setPacket(L, top(getPacket(L)))) > .
	rl [one-cond] : < one, L, condition > => < pre-terminate, (setPacket(L, top(getPacket(L)))) > .




	---fig 5 line 2
	crl [test-top] : < F = N, L > => < pre-terminate, setPacket(L, top(getPacket(L))) > if (getPacket(L) $ F) == N /\ getPacket(L) =/= bottom(getPacket(L)) .
	crl [test-top-cond] : < F = N, L, condition > => < pre-terminate, setPacket(L, top(getPacket(L))) > if (getPacket(L) $ F) == N /\ getPacket(L) =/= bottom(getPacket(L)) .
	
	crl [test-bottom] : < F = N, L > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if (getPacket(L) $ F) =/= N .
	crl [test-bottom-cond] : < F = N, L, condition > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if (getPacket(L) $ F) =/= N .




	---fig 5 line 3
	crl [neg-top] : (< ~ A, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) . 
	crl [neg-top-cond] : (< ~ A, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) . 
	
	crl [neg-bottom] : (< ~ A, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) .
	crl [neg-bottom-cond] : (< ~ A, L, condition >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) .




	---fig 5 line 4
	crl [pre-plus-left-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) . 
	crl [pre-plus-left-top-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) . 
	
	crl [pre-plus-right-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) . 
	crl [pre-plus-right-top-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) . 
	



	---fig 5 line 5
	---crl [pre-plus-bottom] : (< A + B, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) . 
	---crl [pre-plus-bottom-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) . 




	---fig 5 line 6
	crl [pre-dot-top] : (< A . B, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) .
 	crl [pre-dot-top-condition] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) .
 	


	
	---fig 5 line 7 
	---crl [pre-dot-left-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) .
	---crl [pre-dot-left-bottom-cond] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) .
	
	---crl [pre-dot-right-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) .
	---crl [pre-dot-right-bottom-cond] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) .





	---fig 6 line 1
	crl [pre-pol-top] : (< A, L >) => (< pol-terminate, (setPacket(L, top(getPacket(L)))) >) if < A, L, condition > => < pre-terminate, L' > /\ getPacket(L') =/= bottom(getPacket(L')) .
	---crl [pre-pol-bottom] : (< A, L >) => (< pol-terminate, L >) if getPacket(L) == bottom(getPacket(L)) /\ A =/= pol-terminate .
	
	


	---fig 6 line 2
 	crl [assgn-top] : (< F <- N, L >) => < pol-terminate, setPacket(L, top((getPacket(L) := (F, N)))) > if getPacket(L) =/= bottom(getPacket(L)) . 
	---crl [assgn-bottom] : (< F <- N, L >) => < pol-terminate, L > if getPacket(L) == bottom(getPacket(L)) .




	---fig 6 line 3
	crl [pol-dot] : (< P . Q, L >) => (< P' . Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	crl [pol-dot-packet-top-terminate] : (< P . Q, L >) => (< Q, setPacket(L', removeTag(getPacket(L'))) >) if (< P, L >) => (< pol-terminate, L' >) /\ getPacket(L') == top(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-dot-packet-bottom-terminate] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ getPacket(L') == bottom(getPacket(L')) .
	



	---fig 6 line 4
	crl [pol-dot-send-or-receive-terminate] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .
	
	---TODO: Implement Rcfg.

	


	---fig 6 line 5
	crl [pol-plus-left] : (< P + Q, L >) => (< P', L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	crl [pol-plus-right] : (< P + Q, L >) => (< Q', L' >) if (< Q, L >) => (< Q', L' >) /\ Q' =/= Q .
	crl [pol-plus-left-terminate] : (< P + Q, L >) => (< pol-terminate, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ P =/= pol-terminate .



	
	---fig 6 line 6
	crl [pol-plus-right-terminate] : (< P + Q, L >) => (< pol-terminate, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ Q =/= pol-terminate .
	crl [recursive] : (< RN .= P, L >) => (< P', L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	crl [recursive-terminate] : (< RN .= P, L >) => (< pol-terminate, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ P =/= pol-terminate .




	---fig 7, line 1
	crl [pol-seq] : (< P ; Q, L >) => (< P' ; Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	
	---TODO: Implement New.



	op handshake(_,_) : Comm Comm -> Bool .
	ceq handshake(C, C') = true if channelPolicyEquals(head(C), head(C')) .  
	eq handshake(C, C') = false [owise] .

	op channelPolicyEquals(_,_) : Policy Policy -> Bool .
	eq channelPolicyEquals(X ! P, X ? P) = true .
	eq channelPolicyEquals(X ? P, X ! P) = true .
	eq channelPolicyEquals(P, P') = false [owise] .

	op getChannel(_) : Policy -> Channel .
	eq getChannel(X ? P) = X .
	eq getChannel(X ! P) = X .

	op getPolicy(_) : Policy -> Policy .
	eq getPolicy(X ? P) = P .
	eq getPolicy(X ! P) = P .

	op hs(_,_,_) : Channel Policy Comm -> Comm .
	eq hs(X, P, C) = append(X !? P, C) .

	op _!?_ : Channel Policy -> Policy .

	---fig 7, line 2
	rl [in] : < X ? P, L, condition > => < P, setComm(L, consume(X, P, getComm(L))) > .
	rl [out] : < X ! P, L, condition > => < pol-terminate, setComm(L, send(X, P, getComm(L))) > .

	crl [in-out-1] : < P || Q, L > => < P' || Q', setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-2] : < LP || P || Q, L > => < LP || P' || Q', setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-3] : < P || Q || RP, L > => < P' || Q' || RP, setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-4] : < LP || P || Q || RP, L > => < LP || P' || Q' || RP, setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .

	crl [in-out-5] : < P || MP || Q, L > => < P' || MP || Q', setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-6] : < LP || P || MP || Q, L > => < LP || P' || MP || Q', setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-7] : < P || MP || Q || RP, L > => < P' || MP || Q' || RP, setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	crl [in-out-8] : < LP || P || MP || Q || RP, L > => < LP || P' || MP || Q' || RP, setComm(L, hs(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getComm(L))) > if < P, L, condition > => < P', L' > /\ < Q, L, condition > => < Q', L'' > /\ eqExcComm(L, L') /\ eqExcComm(L, L'') /\ handshake(getComm(L'), getComm(L'')) .
	
	

	---fig7 line 3
	crl [pol-synch-left] : (< P || Q, L >) => (< P' || Q, L' >) if (< P, L >) => (< P', L' >)  /\ (P' =/= P or L =/= L') . 
	crl [pol-synch-right] : (< P || Q, L >) => (< P || Q', L' >) if (< Q, L >) => (< Q', L' >) /\ (Q' =/= Q or L =/= L') .  



	---fig 7 line 4
	crl [pol-synch-packet-left-terminate-top] : (< P || Q, L >) => (< Q, setPacket(L', removeTag(getPacket(L')))  >) if (< P, L >) => (< pol-terminate, L' >) /\ getPacket(L') == top(getPacket(L')) /\ eqExcPacket(L, L') .
	crl [pol-synch-left-rec-top] : (< RN || Q, L >) => (< RN' || Q, setPacket(L', removeTag(getPacket(L')))  >) if (< RN, L >) => (< RN', L' >) /\ getPacket(L') == top(getPacket(L')) /\ eqExcPacket(L, L') .
	
	---crl [pol-synch-packet-left-terminate-bottom] : (< P || Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ getPacket(L') == bottom(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-synch-packet-left-send] : (< P || Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .




	---fig 7 line 5
	crl [pol-synch-packet-right-terminate-top] : (< P || Q, L >) => (< P, setPacket(L', removeTag(getPacket(L')))  >) if (< Q, L >) => (< pol-terminate, L' >) /\ getPacket(L') == top(getPacket(L')) /\ eqExcPacket(L, L') .
	crl [pol-synch-right-rec-top] : (< P || RN, L >) => (< P || RN', setPacket(L', removeTag(getPacket(L')))  >) if (< RN, L >) => (< RN', L' >) /\ getPacket(L') == top(getPacket(L')) /\ eqExcPacket(L, L') .
	
	
	---crl [pol-synch-packet-right-terminate-bottom] : (< P || Q, L >) => (< P, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ getPacket(L') == bottom(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-synch-packet-right-send] : (< P || Q, L >) => (< P, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .



	---TODO: Implement Rcfg.
	---fig 7 line 6


	---fig 7 line 7
endm


mod DISTRIBUTED-CONTROLLER8 is
	protecting DNA .
	protecting INT .

	ops recL C1 C2 : -> Recursive .
	op Switch(_) : Nat -> Recursive .
	op Switch(_,_,_) : Nat Nat Nat -> Recursive .

	ops upS1 upS2 upS3 upS4 upS5 upS6 : -> Channel .
	ops C1-1 C1-2 C1-3 C2-1 C2-2 C2-3 : -> Recursive .

	
	var E E' : Env .
	var Co Co' : Comm .
	var Ne Ne' : New .
	var R R' : Rcfg .
	vars N1 N2 N3 N4 N5 N1' N2' N3' N4' N5' : Nat .

	var N M : Nat .
	var P P' Q Q' : Policy .
	var C : Channel .
	var Lbl Lbl' : Label .
	var L L' : Label .


	crl [sw-1-1] : < Switch(1, N2, N3), L > => < Switch(1, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-1-2] : < Switch(1, N2, N3), L, condition > => < Switch(1, 2, 4), setComm(L, consume(upS1, pt = 2 . pt <- 4, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-1-3] : < Switch(1, N2, N3), L, condition > => < Switch(1, 0, 0), setComm(L, consume(upS1, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [sw-2-1] : < Switch(2, N2, N3), L > => < Switch(2, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-2-2] : < Switch(2, N2, N3), L, condition > => < Switch(2, 12, 14), setComm(L, consume(upS2, pt = 12 . pt <- 14, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-2-3] : < Switch(2, N2, N3), L, condition > => < Switch(2, 0, 0), setComm(L, consume(upS2, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [sw-3-1] : < Switch(3, N2, N3), L > => < Switch(3, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-3-2] : < Switch(3, N2, N3), L, condition > => < Switch(3, 1, 3), setComm(L, consume(upS3, pt = 1 . pt <- 3, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-3-3] : < Switch(3, N2, N3), L, condition > => < Switch(3, 0, 0), setComm(L, consume(upS3, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [sw-4-1] : < Switch(4, N2, N3), L > => < Switch(4, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-4-2] : < Switch(4, N2, N3), L, condition > => < Switch(4, 11, 13), setComm(L, consume(upS4, pt = 11 . pt <- 13, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-4-3] : < Switch(4, N2, N3), L, condition > => < Switch(4, 0, 0), setComm(L, consume(upS4, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [sw-5-1] : < Switch(5, N2, N3), L > => < Switch(5, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-5-2] : < Switch(5, N2, N3), L, condition > => < Switch(5, 6, 7), setComm(L, consume(upS5, pt = 6 . pt <- 7, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-5-3] : < Switch(5, N2, N3), L, condition > => < Switch(5, 5, 7), setComm(L, consume(upS5, pt = 5 . pt <- 7, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-5-4] : < Switch(5, N2, N3), L, condition > => < Switch(5, 0, 0), setComm(L, consume(upS5, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [sw-6-1] : < Switch(6, N2, N3), L > => < Switch(6, N2, N3), setPacket(L, top(getPacket(L) := (pt, N3))) > if getPacket(L) $ pt == N2 /\ getPacket(L) == removeTag(getPacket(L)) /\ N2 =/= 0 /\ N3 =/= 0 .
	crl [sw-6-2] : < Switch(6, N2, N3), L, condition > => < Switch(6, 8, 9), setComm(L, consume(upS6, pt = 8 . pt <- 9, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-6-3] : < Switch(6, N2, N3), L, condition > => < Switch(6, 8, 10), setComm(L, consume(upS6, pt = 8 . pt <- 10, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [sw-6-4] : < Switch(6, N2, N3), L, condition > => < Switch(6, 0, 0), setComm(L, consume(upS6, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .


	crl [recL-1] : < recL, L > => < recL, setPacket(L, top(getPacket(L) := (pt, 5))) > if getPacket(L) $ pt == 3 /\ getPacket(L) == removeTag(getPacket(L)) .
	crl [recL-2] : < recL, L > => < recL, setPacket(L, top(getPacket(L) := (pt, 6))) > if getPacket(L) $ pt == 4 /\ getPacket(L) == removeTag(getPacket(L)) .
	crl [recL-3] : < recL, L > => < recL, setPacket(L, top(getPacket(L) := (pt, 8))) > if getPacket(L) $ pt == 7 /\ getPacket(L) == removeTag(getPacket(L)) .
	crl [recL-4] : < recL, L > => < recL, setPacket(L, top(getPacket(L) := (pt, 11))) > if getPacket(L) $ pt == 9 /\ getPacket(L) == removeTag(getPacket(L)) .
	crl [recL-5] : < recL, L > => < recL, setPacket(L, top(getPacket(L) := (pt, 12))) > if getPacket(L) $ pt == 10 /\ getPacket(L) == removeTag(getPacket(L)) .


	

	crl [C1-1] : < C1-1, L, condition > => < pol-terminate, setComm(L, send(upS1, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [C1-2] : < C1-2, L, condition > => < pol-terminate, setComm(L, send(upS3, pt = 1 . pt <- 3, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [C1-3] : < C1-3, L, condition > => < pol-terminate, setComm(L, send(upS5, pt = 5 . pt <- 7, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .

	crl [C2-1] : < C2-1, L, condition > => < pol-terminate, setComm(L, send(upS2, zero, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [C2-2] : < C2-2, L, condition > => < pol-terminate, setComm(L, send(upS4, pt = 11 . pt <- 13, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
	crl [C2-3] : < C2-3, L, condition > => < pol-terminate, setComm(L, send(upS6, pt = 8 . pt <- 9, getComm(L))) > if getPacket(L) =/= bottom(getPacket(L)) .
endm


mod MUTEX-PREDS is
	including FIELD .
	including DNA .
	including SATISFACTION .
	including MODEL-CHECKER .
	including LTL-SIMPLIFIER .
	including DISTRIBUTED-CONTROLLER8 .

	subsort Configuration < State .

	op bad : Nat -> Prop .

	var C : Configuration .
	var P : Prop .
	var Q : Policy .
	var L : Label .

	var E : Env .
	var Co : Comm .
	var Ne : New .
	var R : Rcfg . 
	vars N : Nat .
	vars N1 N2 N3 N4 N5 : Nat .

	ceq < Q, L > |= bad(N) = true if (getPacket(L) $ pt) == N /\ getPacket(L) == top(getPacket(L)) .
	eq < Q, L > |= bad(N) = false [owise] .
endm

