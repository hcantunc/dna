load model-checker

fmod FIELD is
	protecting NAT .
	sort Field .
endfm

fmod LABEL is
	sort Label .
	sort LabelEl .
	subsort LabelEl < Label .
endfm

fmod PACKET is
	protecting NAT .
	protecting FIELD .	
	protecting LABEL .	

	sort Packet .
	sort Value . 
	subsort Packet < LabelEl .

	ops id typ dst pt sw : -> Field [ctor] .

	op top(_) : Packet -> Packet [ctor] .
	op bottom(_) : Packet -> Packet [ctor] .	
	op isBottom(_) : Packet -> Bool .	
	op isTop(_) : Packet -> Bool .
	op isNoTagged(_) : Packet -> Bool .	
	op removeTag(_) : Packet -> Packet .

	op _$_ : Packet Field -> Nat .
	op #(id : _, typ : _, dst : _, pt : _, sw : _) : Nat Nat Nat Nat Nat -> Packet [ctor] .
	op (_,_) : Field Nat -> Value .
	op _:=_ : Packet Value -> Packet .	

	vars N1 N2 N3 N4 N5 V : Nat .
	var F : Field .
	var P : Packet .

	eq isTop(top(P)) = true .
	eq isTop(bottom(P)) = false .
	eq isTop(#(id : N1, typ : N2, dst : N3, pt : N4, sw : N5)) = false .

	eq isBottom(top(P)) = false .
	eq isBottom(bottom(P)) = true .
	eq isBottom(#(id : N1, typ : N2, dst : N3, pt : N4, sw : N5)) = false .

	ceq isNoTagged(P) = true if isTop(P) == false /\ isBottom(P) == false . 
	ceq isNoTagged(P) = false if isTop(P) == true or isBottom(P) == true .

	eq removeTag(top(P)) = P .
	eq removeTag(bottom(P)) = P .
	---eq removeTag(P) = P [owise] .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ id = N1 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ typ = N2 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ dst = N3 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ pt = N4 .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) $ sw = N5 .

	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (id, V) = #(id : V, typ : N2, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (typ, V) = #(id : N1, typ : V, dst : N3, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (dst, V) = #(id : N1, typ : N2, dst : V, pt : N4, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (pt, V) = #(id : N1, typ : N2, dst : N3, pt : V, sw : N5) .
	eq #(id : N1, typ : N2, dst : N3, pt : N4, sw : N5) := (sw, V) = #(id : N1, typ : N2, dst : N3, pt : N4, sw : V) .

	eq top(P) $ F = P $ F .
	eq bottom(P) $ F = P $ F .
endfm

fmod PREDICATE is	
	protecting FIELD .
	protecting NAT .

	sort Predicate .

	op one : -> Predicate [ctor] .
	op zero : -> Predicate [ctor] .	

	op _=_ : Field Nat -> Predicate [ctor metadata "test" prec 38] .
	op ~_ : Predicate -> Predicate [ctor metadata "negation" prec 39] .
endfm

fmod COMM is
	protecting LABEL .
	sort Channel .
endfm

fmod POLICY is
	protecting FIELD .
	protecting COMM .
	protecting NAT .
	protecting PREDICATE .

	sort Policy .
	subsort Predicate < Policy .

	op _+_ : Policy Policy -> Policy [ctor metadata "nondeterministic choice" prec 43 gather (E e)] .
	op _._ : Policy Policy -> Policy [ctor metadata "sequencing" prec 40 gather (E e)] .
	op _;_ : Policy Policy -> Policy [ctor metadata "sequential composition" prec 40 gather (E e)] .
	op _<-_ : Field Nat -> Policy [ctor metadata "modification" prec 38] .
	op _?_ : Channel Policy -> Policy [ctor prec 38] .
	op _!_ : Channel Policy -> Policy [ctor prec 38] .
	op _||_ : Policy Policy -> Policy [ctor metadata "parallel composition" prec 42 gather (E e)] .
endfm

view Policy from TRIV to POLICY is
	sort Elt to Policy .
endv

fmod COMM-DEF is
	protecting LABEL .
	protecting POLICY .
	protecting COMM .
	protecting LIST {Policy} * (sort List {Policy} to Comm) .
	
	subsort Comm < LabelEl .

	var P : Policy .
	var X : Channel .
	var C : Comm .
	var I : Nat .

	op getChannel(_) : Policy -> Channel .
	op getPolicy(_) : Policy -> Policy .
	op consume(_,_,_) : Channel Policy Comm -> Comm .
	op send(_,_,_) : Channel Policy Comm -> Comm .

	eq getChannel(X ? P) = X .
	eq getChannel(X ! P) = X .
	eq getPolicy(X ? P) = P .
	eq getPolicy(X ! P) = P .

	eq send(X, P, C) = append(X ! P, C) .
	eq consume(X, P, C) = append(X ? P, C) .
endfm

fmod NEW is
	protecting LABEL .

	sort New .
	subsort New < LabelEl .

	op new(_) : LabelEl -> New .
endfm

fmod RCFG is
	protecting LABEL .
	protecting POLICY .
	protecting COMM .
	protecting LIST {Policy} * (sort List {Policy} to Rcfg, sort NeList{Policy} to NeRcfgList, 
								op nil to rnil, op size to rsize, op $size to r$size, op $reverse to r$reverse,
								op reverse to rrerverse, op occurs to roccurs, op front to rfront, op last to rlast,
								op head to rhead, op append to rappend, op tail to rtail, op __ to {__}) .

	subsort Rcfg < LabelEl .

	op rcfg(_,_,_) : Channel Policy Rcfg -> Rcfg .

	var X : Channel .
	var P : Policy .
	var R : Rcfg .

	op _!?_ : Channel Policy -> Policy .

	eq rcfg(X, P, R) = rappend(X !? P, R) .
endfm

fmod LABEL-DEF is
	protecting LABEL .
	protecting PACKET .
	protecting COMM .
	protecting COMM-DEF .
	protecting NEW .
	protecting RCFG .

	sort Template .

	op _x_x_x_ : Packet Comm New Rcfg -> Template .
	op [_] : Template -> Label .

	var P1 P2 : Packet .
	var C1 C2 : Comm .
	var N1 N2 : New .	
	var R1 R2 : Rcfg .	
	var L1 L2 L3 : Label .
	var P : Policy .
	var X : Channel .

	op getPacket(_) : Label -> Packet .
	op setPacket(_,_) : Label Packet -> Label .
	eq getPacket([P1 x C1 x N1 x R1]) = P1 . 
	eq setPacket([P1 x C1 x N1 x R1], P2) = [P2 x C1 x N1 x R1] .

	op getComm(_) : Label -> Comm .
	op setComm(_,_) : Label Comm -> Label .
	eq getComm([P1 x C1 x N1 x R1]) = C1 . 
	eq setComm([P1 x C1 x N1 x R1], C2) = [P1 x C2 x N1 x R1] .

	op getNew(_) : Label -> LabelEl .
	op setNew(_,_) : Label LabelEl -> Label .
	eq getNew([P1 x C1 x N1 x R1]) = N1 . 
	eq setNew([P1 x C1 x N1 x R1], N2) = [P1 x C1 x N2 x R1] .

	op getRcfg(_) : Label -> Rcfg .
	op setRcfg(_,_) : Label Rcfg -> Label .
	eq getRcfg([P1 x C1 x N1 x R1]) = R1 . 
	eq setRcfg([P1 x C1 x N1 x R1], R2) = [P1 x C1 x N1 x R2] .

	op eqExcPacket(_,_) : Label Label -> Bool .
	op eqExcComm(_,_) : Label Label -> Bool .
	op eqExcRcfg(_,_) : Label Label -> Bool .
	op eqExcNew(_,_) : Label Label -> Bool .
	op rcfgCond(_,_,_) : Label Label Label -> Bool .

	---Here we check whether all other elements exept for packets are equal in two labels.
	ceq eqExcPacket(L1, L2) = true if getComm(L1) == getComm(L2) /\ getNew(L1) == getNew(L2) /\ getRcfg(L1) == getRcfg(L2) .
	---eq eqExcPacket(L1, L2) = false [owise] .

	---Here we check whether L2 is equal to modifying L1 with (L1.Comm += last Comm element in L2)
	ceq eqExcComm(L1, L2) = true if append(head(getComm(L2)), getComm(L1)) == getComm(L2) /\ getPacket(L1) == getPacket(L2) /\ getNew(L1) == getNew(L2) /\ getRcfg(L1) == getRcfg(L2) .
	---eq eqExcComm(L1, L2) = false [owise] .

	ceq eqExcNew(L1, L2) = true if getPacket(L1) == getPacket(L2) /\ getComm(L1) == getComm(L2) /\ getRcfg(L1) == getRcfg(L2) .
	---eq eqExcNew(L1, L2) = false [owise] .

	ceq eqExcRcfg(L1, L2) = true if append(head(getRcfg(L2)), getRcfg(L1)) == getRcfg(L2) /\ getPacket(L1) == getPacket(L2) /\ getNew(L1) == getNew(L2) /\ getComm(L1) == getComm(L2) .
	---eq eqExcRcfg(L1, L2) = false [owise] .

	ceq rcfgCond(L1, L2, L3) = true if getChannel(head(getComm(L2))) == getChannel(head(getComm(L3))) /\ getPolicy(head(getComm(L2))) == getPolicy(head(getComm(L3))) /\ append(head(getComm(L2)), getComm(L1)) == getComm(L2) /\ append(head(getComm(L3)), getComm(L1)) == getComm(L3) /\ getPacket(L1) == getPacket(L2) /\ getPacket(L2) == getPacket(L3) /\ getRcfg(L1) == getRcfg(L2) /\ getRcfg(L2) == getRcfg(L3) /\ getNew(L1) == getNew(L2) /\ getNew(L2) == getNew(L3) .
	---eq rcfgCond(L1, L2, L3) = false [owise] .
endfm

fmod TERMINATE is 
	protecting POLICY .

	sort Terminate .
	subsort Terminate < Policy .

	op pre-terminate : -> Terminate [ctor] .
	op pol-terminate : -> Terminate [ctor] .
endfm

fmod RECURSIVE is 
	protecting POLICY .

	sort Recursive .
	subsort Recursive < Policy .
endfm
	
fmod CONFIG is
	protecting POLICY .
	protecting LABEL .

	sort Configuration .
	sort ConditionalRule .
	
	op condition : -> ConditionalRule .

	op <_,_,_> : Policy Label ConditionalRule -> Configuration .
	op <_,_> : Policy Label -> Configuration .
endfm

mod DNA is
	protecting LABEL .
	protecting FIELD .
	protecting PACKET .
	protecting COMM .
	protecting COMM-DEF .
	protecting NAT .
	protecting PREDICATE .
	protecting POLICY .
	protecting LABEL-DEF .	
	protecting TERMINATE .
	protecting CONFIG .
	protecting RECURSIVE .

	vars A B : Predicate .
	var F : Field .
	var N : Nat .
	var L L' L'' : Label .
	var C C' : Comm .
	var P P' Q Q' : Policy .
	var X : Channel .




	---fig 5 line 1
	crl [zero] : < zero, L > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if isNoTagged(getPacket(L)) .
	crl [zero-cond] : < zero, L, condition > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if isNoTagged(getPacket(L)) .

	crl [one] : < one, L > => < pre-terminate, (setPacket(L, top(getPacket(L)))) > if isNoTagged(getPacket(L)) .
	crl [one-cond] : < one, L, condition > => < pre-terminate, (setPacket(L, top(getPacket(L)))) > if isNoTagged(getPacket(L)) .




	---fig 5 line 2
	crl [test-top] : < F = N, L > => < pre-terminate, setPacket(L, top(getPacket(L))) > if (getPacket(L) $ F) == N /\ isNoTagged(getPacket(L)) .
	crl [test-top-cond] : < F = N, L, condition > => < pre-terminate, setPacket(L, top(getPacket(L))) > if (getPacket(L) $ F) == N /\ isNoTagged(getPacket(L)) .
	
	---crl [test-bottom] : < F = N, L > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if (getPacket(L) $ F) =/= N /\ isNoTagged(getPacket(L)) .
	---crl [test-bottom-cond] : < F = N, L, condition > => < pre-terminate, (setPacket(L, bottom(getPacket(L)))) > if (getPacket(L) $ F) =/= N /\ isNoTagged(getPacket(L)) .




	---fig 5 line 3
	---crl [neg-top] : (< ~ A, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	---crl [neg-top-cond] : (< ~ A, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	
	---crl [neg-bottom] : (< ~ A, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) .
	---crl [neg-bottom-cond] : (< ~ A, L, condition >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) .




	---fig 5 line 4
	crl [pre-plus-left-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	crl [pre-plus-left-top-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	
	crl [pre-plus-right-top] : (< A + B, L >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	crl [pre-plus-right-top-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, top(getPacket(L))) > if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	



	---fig 5 line 5
	---crl [pre-plus-bottom] : (< A + B, L >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) . 
	---crl [pre-plus-bottom-cond] : (< A + B, L, condition >) => < pre-terminate, setPacket(L, bottom(getPacket(L))) > if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) . 




	---fig 5 line 6
	crl [pre-dot-top] : (< A . B, L >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) .
 	crl [pre-dot-top-condition] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, top(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, top(getPacket(L))) /\ isNoTagged(getPacket(L)) .
 	


	
	---fig 5 line 7 
	---crl [pre-dot-left-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) .
	---crl [pre-dot-left-bottom-cond] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< A, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) .
	
	---crl [pre-dot-right-bottom] : (< A . B, L >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) .
	---crl [pre-dot-right-bottom-cond] : (< A . B, L, condition >) => (< pre-terminate, setPacket(L, bottom(getPacket(L))) >) if (< B, L >) => (< pre-terminate, L' >) /\ L' == setPacket(L, bottom(getPacket(L))) /\ isNoTagged(getPacket(L)) .





	---fig 6 line 1
	crl [pre-pol-top] : (< A, L >) => (< pol-terminate, (setPacket(L, top(getPacket(L)))) >) if < A, L, condition > => < pre-terminate, L' > /\ isNoTagged(getPacket(L)) /\ isTop(getPacket(L')) .
	---crl [pre-pol-bottom] : (< A, L >) => (< pol-terminate, L >) if isBottom(getPacket(L)) /\ A =/= pol-terminate .
	
	


	---fig 6 line 2
 	crl [assgn-top] : (< F <- N, L >) => < pol-terminate, setPacket(L, top((getPacket(L) := (F, N)))) > if isNoTagged(getPacket(L)) . 
	---crl [assgn-bottom] : (< F <- N, L >) => < pol-terminate, L > if isBottom(getPacket(L)) .




	---fig 6 line 3
	crl [pol-dot] : (< P . Q, L >) => (< P' . Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	crl [pol-dot-packet-top-terminate] : (< P . Q, L >) => (< Q, setPacket(L', removeTag(getPacket(L'))) >) if (< P, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isTop(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-dot-packet-bottom-terminate] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isBottom(getPacket(L')) .
	



	---fig 6 line 4
	crl [pol-dot-send-or-receive-terminate] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .
	crl [pol-dot-rcfg-terminate] : (< P . Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ eqExcRcfg(L, L') .
	


	---fig 6 line 5
	crl [pol-plus-left] : (< P + Q, L >) => (< P', L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	crl [pol-plus-right] : (< P + Q, L >) => (< Q', L' >) if (< Q, L >) => (< Q', L' >) /\ Q' =/= Q .
	crl [pol-plus-left-terminate] : (< P + Q, L >) => (< pol-terminate, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ P =/= pol-terminate .



	
	---fig 6 line 6
	crl [pol-plus-right-terminate] : (< P + Q, L >) => (< pol-terminate, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ Q =/= pol-terminate .




	---fig 7, line 1
	crl [pol-seq] : (< P ; Q, L >) => (< P' ; Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P .
	---TODO: Implement New.





	---fig 7, line 2
	rl [in] : < X ? P, L > => < P, setComm(L, consume(X, P, getComm(L))) > .
	rl [out] : < X ! P, L > => < pol-terminate, setComm(L, send(X, P, getComm(L))) > .


	

	---fig7 line 3
	crl [pol-synch-left] : (< P || Q, L >) => (< P' || Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P . 
	crl [pol-synch-right] : (< P || Q, L >) => (< P || Q', L' >) if (< Q, L >) => (< Q', L' >) /\ Q' =/= Q . 

	crl [pol-synch-left-cond] : (< P || Q, L, condition >) => (< P' || Q, L' >) if (< P, L >) => (< P', L' >) /\ P' =/= P . 
	crl [pol-synch-right-cond] : (< P || Q, L, condition >) => (< P || Q', L' >) if (< Q, L >) => (< Q', L' >) /\ Q' =/= Q .




	---fig 7 line 4
	crl [pol-synch-packet-left-terminate-top] : (< P || Q, L >) => (< Q, setPacket(L', removeTag(getPacket(L')))  >) if (< P, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isTop(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-synch-packet-left-terminate-bottom] : (< P || Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isBottom(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-synch-packet-left-send] : (< P || Q, L >) => (< Q, L' >) if (< P, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .




	---fig 7 line 5
	crl [pol-synch-packet-right-terminate-top] : (< P || Q, L >) => (< P, setPacket(L', removeTag(getPacket(L')))  >) if (< Q, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isTop(getPacket(L')) /\ eqExcPacket(L, L') .	
	---crl [pol-synch-packet-right-terminate-bottom] : (< P || Q, L >) => (< P, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ isNoTagged(getPacket(L)) /\ isBottom(getPacket(L')) /\ eqExcPacket(L, L') .
	---crl [pol-synch-packet-right-send] : (< P || Q, L >) => (< P, L' >) if (< Q, L >) => (< pol-terminate, L' >) /\ eqExcComm(L, L') .



	---fig 7 line 6
	crl [pol-rcfg-synch] : (< P || Q, L >) => (< P' || Q', setRcfg(L, rcfg(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getRcfg(L)))  >) if (< P, L >) => (< P', L' >) /\ (< Q, L >) => (< Q', L'' >) /\ rcfgCond(L, L', L'') .
	crl [pol-rcfg-synch-cond] : (< P || Q, L >) => (< P' || Q', setRcfg(L, rcfg(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getRcfg(L)))  >) if (< P, L, condition >) => (< P', L' >) /\ (< Q, L, condition >) => (< Q', L'' >) /\ rcfgCond(L, L', L'') .
	---crl [pol-rcfg-left-terminate] : (< P || Q, L >) => (< Q', setRcfg(L, rcfg(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getRcfg(L)))  >) if (< P, L >) => (< pol-terminate, L' >) /\ (< Q, L >) => (< Q', L'' >) /\ rcfgCond(L, L', L'') .
	

	---fig 7 line 7
	---crl [pol-rcfg-right-terminate] : (< P || Q, L >) => (< P', setRcfg(L, rcfg(getChannel(head(getComm(L'))), getPolicy(head(getComm(L'))), getRcfg(L)))  >) if (< P, L >) => (< P', L' >) /\ (< Q, L >) => (< pol-terminate, L'' >) /\ rcfgCond(L, L', L'') .
endm

mod DNA-TOOLS is
	protecting FIELD .
	protecting NAT .
	protecting LABEL .
	protecting POLICY .
	protecting DNA .

	var F : Field .
	vars N1 N2 : Nat .
	var L : Label .

	op atomicTA(_,_,_) : Field Nat Nat -> Policy .
	crl < atomicTA(F, N1, N2), L > => < pol-terminate, setPacket(L, top(getPacket(L) := (F, N2))) > if (getPacket(L) $ F) == N1 /\ isNoTagged(getPacket(L)) .
endm

mod DISTRIBUTED-CONTROLLER is
	protecting DNA .
	protecting DNA-TOOLS .

	op Switch1(_) : Nat -> Recursive .
	op Switch2(_) : Nat -> Recursive .
	op Switch3(_) : Nat -> Recursive .
	op Switch4(_) : Nat -> Recursive .
	op Switch5v1(_) : Nat -> Recursive .
	op Switch5v2(_) : Nat -> Recursive .
	op Switch6v1(_) : Nat -> Recursive .
	op Switch6v2(_) : Nat -> Recursive .
	op C1v1 : -> Recursive .
	op C1v2 : -> Recursive .
	op C1v3 : -> Recursive .
	op C2v1 : -> Recursive .
	op C2v2 : -> Recursive .
	op C2v3 : -> Recursive .
	op recL(_) : Nat -> Recursive .

	ops upS1 upS2 upS3 upS4 upS5 upS6 : -> Channel .

	var N : Nat .
	var L L' : Label .
	var R R' : Policy .
	var P P' : Policy .
	var F : Field .
	var N1 N2 : Nat .



	crl [sw-1] : < Switch1(N), L > => < atomicTA(pt, 2, 4) . Switch1(N + 1) + upS1 ? zero, L > if  < atomicTA(pt, 2, 4) + upS1 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-1c] : < Switch1(N), L, condition > => < atomicTA(pt, 2, 4) . Switch1(N + 1) + upS1 ? zero, L > .
	

	crl [sw-2] : < Switch2(N), L > => < atomicTA(pt, 12, 14) . Switch2(N + 1) + upS2 ? zero, L > if  < atomicTA(pt, 12, 14) + upS2 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-2c] : < Switch2(N), L, condition > => < atomicTA(pt, 12, 14) . Switch2(N + 1) + upS2 ? zero, L > .


	crl [sw-3] : < Switch3(N), L > => < upS3 ? atomicTA(pt, 1, 3), L > if  < upS3 ? atomicTA(pt, 1, 3), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-3c] : < Switch3(N), L, condition > => < upS3 ? atomicTA(pt, 1, 3), L > .


	crl [sw-4] : < Switch4(N), L > => < upS4 ? atomicTA(pt, 11, 13), L > if  < upS4 ? atomicTA(pt, 11, 13), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-4c] : < Switch4(N), L, condition > => < upS4 ? atomicTA(pt, 11, 13), L > .


	crl [sw-5-1] : < Switch5v1(N), L > => < atomicTA(pt, 6, 7) . Switch5v1(N + 1) + (upS5 ? atomicTA(pt, 5, 7)) . Switch5v2(N + 1) + upS5 ? zero, L > if  < atomicTA(pt, 6, 7) + (upS5 ? atomicTA(pt, 5, 7)) . Switch5v2(N + 1) + upS5 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-5-1c] : < Switch5v1(N), L, condition > => < atomicTA(pt, 6, 7) . Switch5v1(N + 1) + (upS5 ? atomicTA(pt, 5, 7)) . Switch5v2(N + 1) + upS5 ? zero, L > .
	crl [sw-5-2] : < Switch5v2(N), L > => < atomicTA(pt, 5, 7) . Switch5v2(N + 1) + upS5 ? zero, L > if  < atomicTA(pt, 5, 7) + upS5 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-5-2c] : < Switch5v2(N), L, condition > => < atomicTA(pt, 5, 7) . Switch5v2(N + 1) + upS5 ? zero, L > .

	crl [sw-6-1] : < Switch6v1(N), L > => < atomicTA(pt, 8, 10) . Switch6v1(N + 1) + (upS6 ? atomicTA(pt, 8, 9)) . Switch6v2(N + 1) + upS6 ? zero, L > if  < atomicTA(pt, 8, 10) + (upS6 ? atomicTA(pt, 8, 9)) . Switch6v2(N + 1) + upS6 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-6-1c] : < Switch6v1(N), L, condition > => < atomicTA(pt, 8, 10) . Switch6v1(N + 1) + (upS6 ? atomicTA(pt, 8, 9)) . Switch6v2(N + 1) + upS6 ? zero, L > .

	crl [sw-6-2] : < Switch6v2(N), L > => < atomicTA(pt, 8, 9) . Switch6v2(N + 1) + upS6 ? zero, L > if  < atomicTA(pt, 8, 9) + upS6 ? zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [sw-6-2c] : < Switch6v2(N), L, condition > => < atomicTA(pt, 8, 9) . Switch6v2(N + 1) + upS6 ? zero, L > .


	crl [recL] : < recL(N), L > => < (atomicTA(pt, 3, 5) + atomicTA(pt, 4, 6) + atomicTA(pt, 7, 8) + atomicTA(pt, 9, 11) + atomicTA(pt, 10, 12)) . recL(N + 1), L > if  < (atomicTA(pt, 3, 5) + atomicTA(pt, 4, 6) + atomicTA(pt, 7, 8) + atomicTA(pt, 9, 11) + atomicTA(pt, 10, 12)), L > => < P', L' > /\ isTop(getPacket(L')) == true .


	crl [c1-1] : < C1v1, L > => < upS1 ! zero, L > if  < upS1 ! zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c1-1c] : < C1v1, L, condition > => < upS1 ! zero, L > .

	crl [c1-2] : < C1v2, L > => < upS3 ! atomicTA(pt, 1, 3), L > if  < upS3 ! atomicTA(pt, 1, 3), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c1-2c] : < C1v2, L, condition > => < upS3 ! atomicTA(pt, 1, 3), L > .
	
	crl [c1-3] : < C1v3, L > => < upS5 ! atomicTA(pt, 5, 7), L > if  < upS5 ! atomicTA(pt, 5, 7), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c1-3c] : < C1v3, L, condition > => < upS5 ! atomicTA(pt, 5, 7), L > .



	crl [c2-1] : < C2v1, L > => < upS2 ! zero, L > if  < upS2 ! zero, L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c2-1c] : < C2v1, L, condition > => < upS2 ! zero, L > .

	crl [c2-2] : < C2v2, L > => < upS4 ! atomicTA(pt, 11, 13), L > if  < upS4 ! atomicTA(pt, 11, 13), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c2-2c] : < C2v2, L, condition > => < upS4 ! atomicTA(pt, 11, 13), L > .

	crl [c2-3] : < C2v3, L > => < upS6 ! atomicTA(pt, 8, 9), L > if  < upS6 ! atomicTA(pt, 8, 9), L > => < P', L' > /\ isTop(getPacket(L')) == true .
	rl [c2-3c] : < C2v3, L, condition > => < upS6 ! atomicTA(pt, 8, 9), L > .
endm

mod MUTEX-PREDS is
	including DNA .
	including SATISFACTION .
	including MODEL-CHECKER .
	including LTL-SIMPLIFIER .
	including DISTRIBUTED-CONTROLLER .

	subsort Configuration < State .

	ops upS1 upS2 upS3 upS4 upS5 upS6 : -> Channel .
	op bad : Nat -> Prop .

	var Q : Policy .
	var L : Label .

	var Co : Comm .
	var Ne : New .
	var R : Rcfg . 
	vars N : Nat .
	vars N1 N2 N3 N4 N5 : Nat .

	ceq < Q, L > |= bad(N) = true if (isTop(getPacket(L)) and (getPacket(L) $ pt) == N)  .
	eq < Q, L > |= bad(N) = false [owise] .
endm

